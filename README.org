
#+title: Actor framework featuring actors and agents
#+author: Manfred Bergmann

** Introduction

cl-gserver is a 'message passing' library/framework with actors similar to Erlang or Akka.

Version 1.0 of =cl-gserver= library comes with quite a few new features. One of the major new features is that an actor is not bound to it's own message dispatcher thread. Instead, when an =actor-system= is set-up, actors can use a shared pool of message dispatchers which effectively allows to create millions of actors.

It is now possible to create actor hierarchies. An actor can have child actors. An actor now can also 'watch' another actor to get notified about it's termination.

It is also possible to specify timeouts for the =ask= and =async-ask= functionality.

This new version is closer to Akka (the actor model framework on the JVM) than to GenServer on Erlang. This is because Common Lisp from a runtime perspective is closer to JVM than to Erlang/OTP. Threads in Common Lisp are heavy weight OS threads rather than user-space low weight 'Erlang' threads (I'd like to avoid 'green threads', because threads in Erlang are not really green threads). While on Erlang it is easily possible to spawn millions of processes/threads and so each actor (GenServer) has its own process, this model is not possible when the threads are OS threads, because of OS resource limits.
This is the main reason for working with the message dispatcher pool instead.

But let's jump right into it. I'll explain more later.

** Getting hands-on

*** Creating an actor-system

To use the shared dispatcher pool we have to create an =actor-system= first.

#+BEGIN_SRC lisp
(defvar *system* (asys:make-actor-system))
#+END_SRC

When we eval ~*system*~ in the repl we see a bit of the structure:

#+BEGIN_EXAMPLE
#<ACTOR-SYSTEM shared-workers: 4, user actors: 0, internal actors: 0>
#+END_EXAMPLE

So the =actor-system= has by default four shared message dispatcher workers. Depending on how busy the system tends to be this default can of course be increased.

**** Shutting down the system

Shutting down an actor system may be necessary depending on how it's used. It can be done by:

#+BEGIN_SRC lisp
(ac:shutdown *system*)
#+END_SRC

This will stop all dispatcher workers and all other actors that have been spawed in the system.


*** Creating actors

Actors kind of live within an =actor-context=. An ~actor-context~ contains a collection (of actors) and defines a Common Lisp protocol that spawns a set of generic functions.

There are two 'things' that host an =actor-context=. This is: 
1. the =actor-system=. Creating actors on the =actor-system= will create root actors.
2. the =actor=. Creating actors on the context of an actor will create a child actor.

Here we now use the =actor-context= protocol/api nicknamed =ac=.

#+BEGIN_SRC lisp
(ac:actor-of *system* (lambda ()
                        (act:make-actor 
                             (lambda (self msg state)
                               (let ((output (format nil "Hello ~a" msg)))
                                 (format t "~a~%" output)
                                 (cons output state)))
                             :name "answerer")))
#+END_SRC

This creates a root actor on the ~*system*~. Notice that the actor is not assigned to a variable. It is now registered in the system. The main argument to the =actor-of= function is a 'creator-function' which when evaluated returns an actor created with the main actor constructor =make-actor=.

=make-actor= requires as main parameter a 'behavior' function which should look familiar if you know the previous version of cl-gserver. The parameters to the 'behavior' function are still the tuple of:
1. =self= - the instance of the actor
2. =msg= - the received message of when this 'behavior function is called
3. =state= - the current state of the actor

The return value of the 'behavior' function should also be familiar. It is the =cons= with =car= being sent back to sender (in case of ask/async-ask) and =cdr= that is set as the new current state of the actor.

The function =actor-of= still returns the actor as can be seen on the repl when this is executed. So it is of course possible to store the actor in a dynamic or lexical context. However, when the lexical context ends, the actor will still live as part of the actor context.

Here we see a few details of the actor. Among which is the name and also the type of message-box it uses. By default it is a =message-box/dp= which is the type of a shared message dispatcher message-box.

#+BEGIN_EXAMPLE
#<ACTOR answerer, running: T, state: NIL, message-box: #<MESSAGE-BOX/DP mesgb-9541, processed messages: 0, max-queue-size: 0, queue: #<QUEUE-UNBOUNDED #x3020029918FD>>>
#+END_EXAMPLE

Had we stored the actor to a variable, say =*answerer*= we can create a child actor of that by doing:

#+BEGIN_SRC lisp
(ac:actor-of (act:context *answerer*) 
                          (lambda ()
                            (act:make-actor
                             (lambda (self msg state)
                               (let ((output (format nil "~a" "Hello-child ~a" msg)))
                                 (format t "~a~%" output)
                               (cons output state)))
                             :name "child-answerer")))
#+END_SRC

This will create a new actor on the context of the parent actor. The context is retrieved with ~(act:context *answerer*)~.

**** ~:pinned~ vs. ~:shared~
 
By default an actor, created using ~actor-of~, uses a ~:shared~ dispatcher type which uses the shared message dispatchers that are setup in the system. It is also possible to create actors with their own dispatcher thread, those are called ~:pinned~ actors. Just provide the ~:pinned~ value to the ~dispatcher-type~ key parameter.

*** Finding actors in the context

If actors are not directly stored in a dynamic or lexical context they can still be looked up and used. The =actor-context= protocol contains a function =find-actors= which works like this:

#+BEGIN_SRC lisp
(first (ac:find-actors 
                 *system*
                 (lambda (actor) (string= "answerer" 
                                          (act-cell:name actor)))))
#+END_SRC

=find-actors= takes as first parameter the actor context. This can be either the actor system, or the context of an actor. The second parameter is a test function. This example makes a string comparison on the actor name. So the above function will output:

#+BEGIN_EXAMPLE
#<ACTOR answerer, running: T, state: NIL, message-box: #<MESSAGE-BOX/DP mesgb-9687, processed messages: 0, max-queue-size: 0, queue: #<QUEUE-UNBOUNDED #x30200263C95D>>>
#+END_EXAMPLE

This function only does a simple flat search. The functionality of looking up an actor in the system generally will be expanded upon.

*** tell, ask and async-ask

Let's send some messages.

**** tell

=tell= is a fire-and-forget kind of send type. It doesn't expect a result in return.

And because of that, and in order to demonstrate it does something, it has to have a side-effect. So it dumps some string to the console using ~format~, because we couldn't otherwise =tell= if the message was received and processed (see the =*answerer*= actor definitions above).

#+BEGIN_SRC lisp
CL-USER> (act:tell *answerer* "Foo")
T
CL-USER> 
Hello Foo
#+END_SRC

So we see that =tell= returns immediately with ~T~. But to see the 'Hello Foo' it takes another hit on the return key, because the REPL is not asynchronous.

**** tell with sender

=tell= accepts a 'sender', which has to be an actor. So we can do like this:

#+BEGIN_SRC lisp
CL-USER> (act:tell *child-answerer* "Foo" *answerer*)
T
CL-USER> 
Hello-child Foo
Hello Hello-child Foo
#+END_SRC

This sends "Foo" to ~*child-answerer*~, but ~*child-answerer*~ sends the response to ~*answerer*~. So we see outputs of both actors.

**** ask

=ask= blocks until the message was processed by the actor. This call returns the ~car~ part of the ~cons~ return of the behavior function.
Insofar an =ask= call is more resource intensive than just a =tell=.

#+BEGIN_SRC lisp
(act:ask *answerer* "Bar")
#+END_SRC

Will respond with: 'Hello Bar'

**** async-ask

=async-ask= combines both =ask= and =tell=. From =ask= it 'inherits' returning a result, even though it's a future result.
Internally it is implemented using =tell=. In order to wait for a result a temporary actor is spawned that waits until it receives the result from the actor where the message was sent to. With this received result the future is fulfilled.
So =async-ask= is async, it returns immediately with a =future=. That =future= can be queried until it is fulfilled. Better is though to setup an ~on-completed~ handler function on it.

So we can do:

#+BEGIN_SRC lisp
(future:on-completed
          (act:async-ask *answerer* "Buzz")
          (lambda (result)
            (format t "Received result: ~a~%" result)))
#+END_SRC

Well, one step at a time:

#+BEGIN_SRC lisp
(act:async-ask *answerer* "Buzz")
#+END_SRC

Returns with:

#+BEGIN_EXAMPLE
#<FUTURE promise: #<PROMISE finished: NIL errored: NIL forward: NIL #x302002EAD6FD>>
#+END_EXAMPLE

Then we can setup a completion handler on the future:

#+BEGIN_SRC lisp
(future:on-completed 
          *
          (lambda (result)
            (format t "Received result: ~a~%" result)))
#+END_SRC

Remember '*' is the last result in the REPL which is the future here.

This will print after a bit:

#+BEGIN_EXAMPLE
Hello Buzz
Received result: Hello Buzz
#+END_EXAMPLE

*** ask and async-ask with timeout

A timeout (in seconds) can be specified for both =ask= and =async-ask= and is done like so:

To demonstrate this we could setup an example 'sleeper' actor:

#+BEGIN_SRC lisp
(ac:actor-of *system* 
             (lambda () (act:make-actor 
                           (lambda (self msg state)
                             (sleep 5)))))
#+END_SRC

If we store this to ~*sleeper*~ and do the following, the =ask= will return a =handler-error= with an =ask-timeout= condition.

#+BEGIN_SRC lisp
(act:ask *sleeper* "Foo" :time-out 2)
#+END_SRC

#+BEGIN_EXAMPLE
(:HANDLER-ERROR . #<CL-GSERVER.UTILS:ASK-TIMEOUT #x30200319F97D>)
#+END_EXAMPLE

This works similar with the =async-ask= only that the future will be fulfilled with the =handler-error= ~cons~.

To get a readable error message of the condition we can do:

#+BEGIN_EXAMPLE
CL-USER> (format t "~a" (cdr *))
A timeout set to 2 seconds occurred. Cause: 
#<BORDEAUX-THREADS:TIMEOUT #x302002FAB73D> 
#+END_EXAMPLE

*** Changing behavior

An actor can change behavior. The behavior is just a lambda that has to take three parameters: 
1. the actor's instance - usually called ~self~
2. the received message - maybe call ~msg~?
3. the current state of the actor

The behavior then can pattern match (or do some matching by other means) on the received message alone, or in combination with the current state.

The default behavior of the actor is given on actor construction using the default constructor ~make-actor~.

During the lifetime of an actor the behavior can be changed using ~become~.

So we remember the ~*answerer*~ which responds with 'Hello Foo' when we send ~(act:ask *answerer* "Foo")~. We can now change the behavior with:

#+BEGIN_SRC lisp
(act:become *answerer* 
            (lambda (self msg state)
              (cons (format nil "my new behavior for: ~a" msg) state)))
#+END_SRC

When we now send ~(act:ask *answerer* "Foo")~ we will get the response: 'my new behavior for: Foo'.

*** Creating actors without a system

It is still possible to create actors without a system. This is how you do it:

#+BEGIN_SRC lisp
;; make an actor
(defvar *my-actor* (act:make-actor (lambda (self msg state)
                                     (cons "Foo" state))
                                   :name "Lone-actor"))
;; setup a thread based message box
(setf (act-cell:msgbox *my-actor*) 
      (make-instance 'mesgb:message-box/bt))
#+END_SRC

You have to take care yourself about stopping the actor and freeing resources.

** Agents

TODO

** Benchmarks

[[./docs/perf.png]]


Hardware specs:

- iMac Pro (2017) with 8 Core Xeon, 32 GB RAM

*All*

The benchmark was created by having 8 threads throwing each 125k (1m alltogether) messages at 1 actor.
The timing was taken for when the actor did finish processing those 1m messages.
The messages were sent by either all =tell=, =ask=, or =async-ask= to an actor whose message-box worked using a single thread (=:pinned=) or a dispatched message queue (=:shared= / =dispatched=) with 8 workers.

Of course a =tell= is in most cases the fastest one, because it's the least resource intensive and there is no place that is blocking in this workflow.

*SBCL (v2.0.10)*

Even though SBCL is by far the fastest one with =tell= on both =:pinned= and =dispatched=, it had massive problems on =dispatched - ask= where I had to lower the number of messages to 200k alltogether. Beyond that value SBCL didn't get it worked out.

*CCL (v1.12)*

CCL is on acceptable average speed. The problems CCL had was heap exhaustion for both the =async-ask= tasks where the number of messages had to be reduced to 80k. Which is not a lot. Beyond this value the runtime would crash.
However, CCL for some reason had no problems where SBCL was struggling with the =dispatched - ask=.

*ABCL (1.8)*

The pleasant surprise was ABCL. While not being the fastest it is the most robust.
Where SBCL and CCL were struggling you could throw anything at ABCL and it'll cope with it.
I'm assuming that this is because of the massively battle proven Java Runtime.
